#version 460

#include "extensions.glsl"

#define PI 3.141593f

#include "utils.glsl"

layout(binding = 0) uniform samplerCube skyboxTex;

layout(r32ui, binding = 1) uniform restrict writeonly uimageCube outputTex;

layout(local_size_x = 8, local_size_y = 8) in;
void main() {
    vec3 pos = 2.0f * vec3(gl_GlobalInvocationID.xy / vec2(imageSize(outputTex)), 1.0f) - 1.0f;
	vec3 faces[6] = {
		vec3( pos.z, -pos.y, -pos.x),
		vec3(-pos.z, -pos.y,  pos.x),
		vec3( pos.x,  pos.z,  pos.y),
		vec3( pos.x, -pos.z, -pos.y),
		vec3( pos.x, -pos.y,  pos.z),
		vec3(-pos.x, -pos.y, -pos.z)
	};
	vec3 normal = normalize(faces[gl_GlobalInvocationID.z]);

    vec3 irradiance = vec3(0.0f);
    vec3 up = vec3(0.0f, 1.0f, 0.0f);
    vec3 right = normalize(cross(up, normal));
    up = normalize(cross(normal, right));

    // passed into texturelod, sample from the mip that matches the texel count of the irradiance texture
    f32 mipLevel = countMips(textureSize(skyboxTex, 0)) - countMips(imageSize(outputTex));

    const f32 sampleDelta = 0.025f;
    f32 numSamples = 0.0f;

    for(f32 phi = 0.0f; phi < PI * 2.0f; phi += sampleDelta) {
        for(f32 theta = 0.0f; theta < PI * 0.5f; theta += sampleDelta) {
            vec3 tangentSample = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
            vec3 sampleDir = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal; 
            irradiance += textureLod(skyboxTex, sampleDir, mipLevel).rgb * cos(theta) * sin(theta);
            numSamples++;
        }
    }

    imageStore(outputTex, ivec3(gl_GlobalInvocationID), uvec4(packe5bgr9(vec4(irradiance * PI / numSamples, 1.0f))));
}