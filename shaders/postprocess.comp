#version 460

#include "extensions.glsl"

#include "../shared/oitnode.h"

#include "utils.glsl"

layout(rgba16f, binding = 0) uniform restrict readonly image2D framebuffer;
layout(binding = 1) uniform restrict writeonly image2D swapchain;

layout(buffer_reference, scalar) restrict buffer OITBuffer {
    OITNode nodes[];
};

layout(push_constant, scalar) uniform constants {
    OITBuffer oitBuffer;
} pcs;

layout(local_size_x = 8, local_size_y = 8) in;
void main() {
    uvec2 frameBufferSize = uvec2(imageSize(framebuffer));
    vec3 color = imageLoad(framebuffer, ivec2(gl_GlobalInvocationID)).rgb;
    u32 baseIndex = (gl_GlobalInvocationID.y * frameBufferSize.x + gl_GlobalInvocationID.x) * 4;

    if(gl_GlobalInvocationID.x < frameBufferSize.x && gl_GlobalInvocationID.y < frameBufferSize.y) {
        for(u32 i = 4; i > 0; i--) {
            OITNode cur = pcs.oitBuffer.nodes[baseIndex + i - 1];
            if(cur.packedDepthTransmittance != 0) {
                color = mix(unpacke5bgr9(cur.packedColor).rgb, color, unpackTransmittance(cur.packedDepthTransmittance));
            }
            pcs.oitBuffer.nodes[baseIndex + i - 1] = OITNode(0, 0);
        }
    }

    imageStore(swapchain, ivec2(gl_GlobalInvocationID), agx(color));
}