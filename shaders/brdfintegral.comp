#version 460

#include "types.glsl"

#define PI 3.141593f

layout(rg16f, binding = 0) uniform restrict writeonly image2D brdfLUTex;

vec2 hammersley(u32 i, u32 N) {
	u32 bits = i;
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return vec2(f32(i) / f32(N), f32(bits) * 2.3283064365386963e-10f);
}

vec3 importanceSampleGGX(vec2 Xi, vec3 normal, f32 roughness) {
	f32 a = roughness * roughness;

	f32 phi = 2.0 * PI * Xi.x;
	f32 cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
	f32 sinTheta = sqrt(1.0 - cosTheta * cosTheta);
	vec3 H = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

	vec3 up = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent = normalize(cross(up, normal));
	vec3 bitangent = cross(normal, tangent);

	vec3 sampleVec = tangent * H.x + bitangent * H.y + normal * H.z;
	return normalize(sampleVec);
}

f32 geometrySmith(vec3 normal, vec3 viewDir, vec3 lightDir, f32 roughness) {
	f32 k = roughness * roughness / 2.0f;
	f32 nDotV = max(dot(normal, viewDir), 0.0f);
	f32 nDotL = max(dot(normal, lightDir), 0.0f);
	f32 ggx1 = nDotV / (nDotV * (1.0f - k) + k);
	f32 ggx2 = nDotL / (nDotL * (1.0f - k) + k);
	return ggx1 * ggx2;
}

layout (local_size_x = 8, local_size_y = 8) in;
void main() {
	ivec2 dimensions = imageSize(brdfLUTex);
	vec2 uv = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5f)) / dimensions;
	const u32 sampleCount = 1024u;
	vec3 V = vec3(1.0f - uv.x * uv.x, 0.0f, uv.x);
	vec3 normal = vec3(0.0f, 0.0f, 1.0f);
	vec2 result = vec2(0.0f);

	for (u32 i = 0u; i < sampleCount; i++) {
		vec2 Xi = hammersley(i, sampleCount);
		vec3 H = importanceSampleGGX(Xi, normal, uv.y);
		vec3 L = normalize(2.0f * dot(V, H) * H - V);

		f32 nDotL = max(L.z, 0.0f);

		if (nDotL > 0.0f) {
			f32 vDotH = max(dot(V, H), 0.0f);
			f32 gVis = (geometrySmith(normal, V, L, uv.y) * vDotH) / (max(H.z, 0.0f) * uv.x);
			f32 fC = pow(1.0f - vDotH, 5.0f);

			result += vec2((1.0f - fC) * gVis, fC * gVis);
		}
	}
	result /= sampleCount;
	imageStore(brdfLUTex, ivec2(gl_GlobalInvocationID.xy), vec4(result, 0.0f, 0.0f));
}